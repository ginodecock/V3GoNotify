name=GoNotify ATMEGA
version=3.0.0


# AVR compile variables
# --------------------- 

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

# Default "compiler.path" is correct, change only if you want to overidde the initial value
compiler.path={runtime.tools.avr-gcc.path}/bin/
compiler.c.cmd=avr-gcc
compiler.c.flags=-c -g -Os {compiler.warning_flags} -ffunction-sections -fdata-sections -MMD
# -w flag added to avoid printing a wrong warning http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59396
# This is fixed in gcc 4.8.3 and will be removed as soon as we update the toolchain
compiler.c.elf.flags={compiler.warning_flags} -Os -Wl,--gc-sections
compiler.c.elf.cmd=avr-gcc
compiler.S.flags=-c -g -x assembler-with-cpp
compiler.cpp.cmd=avr-g++
compiler.cpp.flags=-c -g -Os {compiler.warning_flags} -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD 
compiler.ar.cmd=avr-ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=avr-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O ihex -R .eeprom
compiler.elf2hex.cmd=avr-objcopy
compiler.ldflags=
compiler.size.cmd=avr-size

# This can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=

# AVR compile patterns
# --------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
# Arduino IDE 1.6.6 (and up?)
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"
# Arduino IDE 1.6.5
#recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{build.path}/{archive_file}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.ldflags} {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o "{build.path}/{build.project_name}.elf" {object_files} "{build.path}/{archive_file}" "-L{build.path}" -lm

## Create output files (.eep and .hex)
recipe.objcopy.eep.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.eep"
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Save hex
recipe.output.tmp_file={build.project_name}.hex
recipe.output.save_file={build.project_name}.{build.variant}.hex

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*
recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*

## CPV recipes for Arduino 1.6.10
# Backup atmega328p crt file
# No, this may cause problems since the toolchain got included in the arduino's own package. What a horrible mess is this platform crap :(
# recipe.hooks.linking.prelink.1.pattern="{compiler.path}{compiler.objcopy.cmd}" "{runtime.tools.avr-gcc.path}/avr/lib/avr5/crtatmega328p.o" "{runtime.tools.avr-gcc.path}/avr/lib/avr5/crtatmega328p.bak"
# Replace atmega328p crt file by atmega328pb crt file
recipe.hooks.linking.prelink.1.pattern="{compiler.path}{compiler.objcopy.cmd}" "{runtime.platform.path}/crtatmega328pb.o" "{runtime.tools.avr-gcc.path}/avr/lib/avr5/crtatmega328p.o"
# Just in case...
recipe.hooks.linking.prelink.2.pattern="{compiler.path}{compiler.objcopy.cmd}" "{runtime.platform.path}/crtatmega328pb.o" "{runtime.tools.avr-gcc.path}/avr/lib/avr5/crtm328p.o"
# Restore atmega328p crt file
#recipe.hooks.linking.postlink.1.pattern="{compiler.path}{compiler.objcopy.cmd}" "{runtime.tools.avr-gcc.path}/avr/lib/avr5/crtatmega328p.o" "{runtime.tools.avr-gcc.path}/avr/lib/avr5/crtatmega328p.o"
recipe.hooks.linking.postlink.1.pattern="{compiler.path}{compiler.objcopy.cmd}" "{runtime.platform.path}/crtatmega328p.o" "{runtime.tools.avr-gcc.path}/avr/lib/avr5/crtatmega328p.o"
# Just in case...
recipe.hooks.linking.postlink.2.pattern="{compiler.path}{compiler.objcopy.cmd}" "{runtime.platform.path}/crtm328p.o" "{runtime.tools.avr-gcc.path}/avr/lib/avr5/crtm328p.o"

# AVR Uploader/Programmers tools
# ------------------------------

tools.avrdude_no_signature.path={runtime.tools.avrdude.path}
tools.avrdude_no_signature.cmd.path={path}/bin/avrdude
tools.avrdude_no_signature.config.path={path}/etc/avrdude.conf


# The ATmega328PB is code compatible with the ATmega328P, but the device signature is different
# and the IDE doesn't know about it (yet). For now, specify -F to bypass the test. Also specify -l option
# to redirect avrdude output to a logfile instead of to the terminal. This seems to be the only way
# to avoid the "Expected signature" message, which the IDE always displays as "Wrong microcontroller found".

tools.avrdude_no_signature.upload.params.verbose=-v -v -v -v
tools.avrdude_no_signature.upload.params.quiet=-q -q
tools.avrdude_no_signature.upload.pattern="{cmd.path}" "-C{config.path}" -l {build.path}/avrdude.log {upload.verbose} -p{build.mcu} -F -c{upload.protocol} -P{serial.port} -b{upload.speed} -D "-Uflash:w:{build.path}/{build.project_name}.hex:i"

tools.avrdude_no_signature.program.params.verbose=-v
tools.avrdude_no_signature.program.params.quiet=-q -q
tools.avrdude_no_signature.program.pattern="{cmd.path}" "-C{config.path}" -l {build.path}/avrdude.log {program.verbose} -p{build.mcu} -F -c{protocol} {program.extra_params} "-Uflash:w:{build.path}/{build.project_name}.hex:i"

tools.avrdude_no_signature.erase.params.verbose=-v
tools.avrdude_no_signature.erase.params.quiet=-q -q
tools.avrdude_no_signature.erase.pattern="{cmd.path}" "-C{config.path}" -l {build.path}/avrdude.log {erase.verbose} -p{build.mcu} -F -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m

tools.avrdude_no_signature.bootloader.params.verbose=-v
tools.avrdude_no_signature.bootloader.params.quiet=-q -q
tools.avrdude_no_signature.bootloader.pattern="{cmd.path}" "-C{config.path}" -l {build.path}/avrdude.log {bootloader.verbose} -F -p{build.mcu} -c{protocol} {program.extra_params} "-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i" -Ulock:w:{bootloader.lock_bits}:m
