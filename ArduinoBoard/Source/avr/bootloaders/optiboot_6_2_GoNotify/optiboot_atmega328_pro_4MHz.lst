
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007a76  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00007800  00007800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000de0  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d8c  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000021  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007800 <main>:
    7800:	1f 92       	push	r1
    7802:	cd b7       	in	r28, 0x3d	; 61
    7804:	de b7       	in	r29, 0x3e	; 62
    7806:	53 98       	cbi	0x0a, 3	; 10
    7808:	25 9a       	sbi	0x04, 5	; 4
    780a:	51 9a       	sbi	0x0a, 1	; 10
    780c:	50 98       	cbi	0x0a, 0	; 10
    780e:	23 9a       	sbi	0x04, 3	; 4
    7810:	24 98       	cbi	0x04, 4	; 4
    7812:	3a 9a       	sbi	0x07, 2	; 7
    7814:	22 9a       	sbi	0x04, 2	; 4
    7816:	3b 9a       	sbi	0x07, 3	; 7
    7818:	4b 9b       	sbis	0x09, 3	; 9
    781a:	41 c0       	rjmp	.+130    	; 0x789e <main+0x9e>
    781c:	84 b7       	in	r24, 0x34	; 52
    781e:	87 7f       	andi	r24, 0xF7	; 247
    7820:	84 bf       	out	0x34, r24	; 52
    7822:	80 91 60 00 	lds	r24, 0x0060
    7826:	88 61       	ori	r24, 0x18	; 24
    7828:	80 93 60 00 	sts	0x0060, r24
    782c:	10 92 60 00 	sts	0x0060, r1
    7830:	2d 9a       	sbi	0x05, 5	; 5
    7832:	2a 9a       	sbi	0x05, 2	; 5
    7834:	43 98       	cbi	0x08, 3	; 8
    7836:	25 e1       	ldi	r18, 0x15	; 21
    7838:	3b e4       	ldi	r19, 0x4B	; 75
    783a:	4f eb       	ldi	r20, 0xBF	; 191
    783c:	4a 95       	dec	r20
    783e:	f1 f7       	brne	.-4      	; 0x783c <main+0x3c>
    7840:	3a 95       	dec	r19
    7842:	e1 f7       	brne	.-8      	; 0x783c <main+0x3c>
    7844:	2a 95       	dec	r18
    7846:	d1 f7       	brne	.-12     	; 0x783c <main+0x3c>
    7848:	00 00       	nop
    784a:	2a 98       	cbi	0x05, 2	; 5
    784c:	25 e1       	ldi	r18, 0x15	; 21
    784e:	3b e4       	ldi	r19, 0x4B	; 75
    7850:	4f eb       	ldi	r20, 0xBF	; 191
    7852:	4a 95       	dec	r20
    7854:	f1 f7       	brne	.-4      	; 0x7852 <main+0x52>
    7856:	3a 95       	dec	r19
    7858:	e1 f7       	brne	.-8      	; 0x7852 <main+0x52>
    785a:	2a 95       	dec	r18
    785c:	d1 f7       	brne	.-12     	; 0x7852 <main+0x52>
    785e:	00 00       	nop
    7860:	42 98       	cbi	0x08, 2	; 8
    7862:	25 e0       	ldi	r18, 0x05	; 5
    7864:	3f e0       	ldi	r19, 0x0F	; 15
    7866:	42 ef       	ldi	r20, 0xF2	; 242
    7868:	4a 95       	dec	r20
    786a:	f1 f7       	brne	.-4      	; 0x7868 <main+0x68>
    786c:	3a 95       	dec	r19
    786e:	e1 f7       	brne	.-8      	; 0x7868 <main+0x68>
    7870:	2a 95       	dec	r18
    7872:	d1 f7       	brne	.-12     	; 0x7868 <main+0x68>
    7874:	25 e0       	ldi	r18, 0x05	; 5
    7876:	3f e0       	ldi	r19, 0x0F	; 15
    7878:	42 ef       	ldi	r20, 0xF2	; 242
    787a:	4a 95       	dec	r20
    787c:	f1 f7       	brne	.-4      	; 0x787a <main+0x7a>
    787e:	3a 95       	dec	r19
    7880:	e1 f7       	brne	.-8      	; 0x787a <main+0x7a>
    7882:	2a 95       	dec	r18
    7884:	d1 f7       	brne	.-12     	; 0x787a <main+0x7a>
    7886:	42 9a       	sbi	0x08, 2	; 8
    7888:	48 9b       	sbis	0x09, 0	; 9
    788a:	02 c0       	rjmp	.+4      	; 0x7890 <main+0x90>
    788c:	2b 9a       	sbi	0x05, 3	; 5
    788e:	01 c0       	rjmp	.+2      	; 0x7892 <main+0x92>
    7890:	2b 98       	cbi	0x05, 3	; 5
    7892:	1c 9b       	sbis	0x03, 4	; 3
    7894:	02 c0       	rjmp	.+4      	; 0x789a <main+0x9a>
    7896:	59 9a       	sbi	0x0b, 1	; 11
    7898:	f7 cf       	rjmp	.-18     	; 0x7888 <main+0x88>
    789a:	59 98       	cbi	0x0b, 1	; 11
    789c:	f5 cf       	rjmp	.-22     	; 0x7888 <main+0x88>
    789e:	80 e8       	ldi	r24, 0x80	; 128
    78a0:	80 93 61 00 	sts	0x0061, r24
    78a4:	81 e0       	ldi	r24, 0x01	; 1
    78a6:	80 93 61 00 	sts	0x0061, r24
    78aa:	11 24       	eor	r1, r1
    78ac:	84 b7       	in	r24, 0x34	; 52
    78ae:	14 be       	out	0x34, r1	; 52
    78b0:	98 2f       	mov	r25, r24
    78b2:	9d 70       	andi	r25, 0x0D	; 13
    78b4:	09 f0       	breq	.+2      	; 0x78b8 <main+0xb8>
    78b6:	d9 d0       	rcall	.+434    	; 0x7a6a <appStart>
    78b8:	85 e0       	ldi	r24, 0x05	; 5
    78ba:	80 93 81 00 	sts	0x0081, r24
    78be:	82 e0       	ldi	r24, 0x02	; 2
    78c0:	80 93 c0 00 	sts	0x00C0, r24
    78c4:	88 e1       	ldi	r24, 0x18	; 24
    78c6:	80 93 c1 00 	sts	0x00C1, r24
    78ca:	86 e0       	ldi	r24, 0x06	; 6
    78cc:	80 93 c2 00 	sts	0x00C2, r24
    78d0:	8c e0       	ldi	r24, 0x0C	; 12
    78d2:	80 93 c4 00 	sts	0x00C4, r24
    78d6:	8e e0       	ldi	r24, 0x0E	; 14
    78d8:	b3 d0       	rcall	.+358    	; 0x7a40 <watchdogConfig>
    78da:	25 9a       	sbi	0x04, 5	; 4
    78dc:	86 e0       	ldi	r24, 0x06	; 6
    78de:	2c e0       	ldi	r18, 0x0C	; 12
    78e0:	3f ef       	ldi	r19, 0xFF	; 255
    78e2:	91 e0       	ldi	r25, 0x01	; 1
    78e4:	30 93 85 00 	sts	0x0085, r19
    78e8:	20 93 84 00 	sts	0x0084, r18
    78ec:	96 bb       	out	0x16, r25	; 22
    78ee:	b0 9b       	sbis	0x16, 0	; 22
    78f0:	fe cf       	rjmp	.-4      	; 0x78ee <main+0xee>
    78f2:	1d 9a       	sbi	0x03, 5	; 3
    78f4:	a8 95       	wdr
    78f6:	81 50       	subi	r24, 0x01	; 1
    78f8:	a9 f7       	brne	.-22     	; 0x78e4 <main+0xe4>
    78fa:	86 e5       	ldi	r24, 0x56	; 86
    78fc:	8e d0       	rcall	.+284    	; 0x7a1a <putch>
    78fe:	81 2c       	mov	r8, r1
    7900:	91 2c       	mov	r9, r1
    7902:	13 e0       	ldi	r17, 0x03	; 3
    7904:	01 e0       	ldi	r16, 0x01	; 1
    7906:	25 e0       	ldi	r18, 0x05	; 5
    7908:	f2 2e       	mov	r15, r18
    790a:	31 e1       	ldi	r19, 0x11	; 17
    790c:	e3 2e       	mov	r14, r19
    790e:	8c d0       	rcall	.+280    	; 0x7a28 <getch>
    7910:	81 34       	cpi	r24, 0x41	; 65
    7912:	79 f4       	brne	.+30     	; 0x7932 <main+0x132>
    7914:	89 d0       	rcall	.+274    	; 0x7a28 <getch>
    7916:	89 83       	std	Y+1, r24	; 0x01
    7918:	99 d0       	rcall	.+306    	; 0x7a4c <verifySpace>
    791a:	89 81       	ldd	r24, Y+1	; 0x01
    791c:	82 38       	cpi	r24, 0x82	; 130
    791e:	11 f4       	brne	.+4      	; 0x7924 <main+0x124>
    7920:	82 e0       	ldi	r24, 0x02	; 2
    7922:	05 c0       	rjmp	.+10     	; 0x792e <main+0x12e>
    7924:	81 38       	cpi	r24, 0x81	; 129
    7926:	11 f4       	brne	.+4      	; 0x792c <main+0x12c>
    7928:	86 e0       	ldi	r24, 0x06	; 6
    792a:	01 c0       	rjmp	.+2      	; 0x792e <main+0x12e>
    792c:	83 e0       	ldi	r24, 0x03	; 3
    792e:	75 d0       	rcall	.+234    	; 0x7a1a <putch>
    7930:	71 c0       	rjmp	.+226    	; 0x7a14 <main+0x214>
    7932:	82 34       	cpi	r24, 0x42	; 66
    7934:	11 f4       	brne	.+4      	; 0x793a <main+0x13a>
    7936:	84 e1       	ldi	r24, 0x14	; 20
    7938:	03 c0       	rjmp	.+6      	; 0x7940 <main+0x140>
    793a:	85 34       	cpi	r24, 0x45	; 69
    793c:	19 f4       	brne	.+6      	; 0x7944 <main+0x144>
    793e:	85 e0       	ldi	r24, 0x05	; 5
    7940:	8d d0       	rcall	.+282    	; 0x7a5c <getNch>
    7942:	68 c0       	rjmp	.+208    	; 0x7a14 <main+0x214>
    7944:	85 35       	cpi	r24, 0x55	; 85
    7946:	49 f4       	brne	.+18     	; 0x795a <main+0x15a>
    7948:	6f d0       	rcall	.+222    	; 0x7a28 <getch>
    794a:	d8 2e       	mov	r13, r24
    794c:	6d d0       	rcall	.+218    	; 0x7a28 <getch>
    794e:	8d 2c       	mov	r8, r13
    7950:	91 2c       	mov	r9, r1
    7952:	98 2a       	or	r9, r24
    7954:	88 0c       	add	r8, r8
    7956:	99 1c       	adc	r9, r9
    7958:	5c c0       	rjmp	.+184    	; 0x7a12 <main+0x212>
    795a:	86 35       	cpi	r24, 0x56	; 86
    795c:	21 f4       	brne	.+8      	; 0x7966 <main+0x166>
    795e:	84 e0       	ldi	r24, 0x04	; 4
    7960:	7d d0       	rcall	.+250    	; 0x7a5c <getNch>
    7962:	80 e0       	ldi	r24, 0x00	; 0
    7964:	e4 cf       	rjmp	.-56     	; 0x792e <main+0x12e>
    7966:	84 36       	cpi	r24, 0x64	; 100
    7968:	09 f0       	breq	.+2      	; 0x796c <main+0x16c>
    796a:	36 c0       	rjmp	.+108    	; 0x79d8 <main+0x1d8>
    796c:	5d d0       	rcall	.+186    	; 0x7a28 <getch>
    796e:	5c d0       	rcall	.+184    	; 0x7a28 <getch>
    7970:	d8 2e       	mov	r13, r24
    7972:	5a d0       	rcall	.+180    	; 0x7a28 <getch>
    7974:	c8 2e       	mov	r12, r24
    7976:	a1 2c       	mov	r10, r1
    7978:	bb 24       	eor	r11, r11
    797a:	b3 94       	inc	r11
    797c:	55 d0       	rcall	.+170    	; 0x7a28 <getch>
    797e:	f5 01       	movw	r30, r10
    7980:	81 93       	st	Z+, r24
    7982:	5f 01       	movw	r10, r30
    7984:	de 12       	cpse	r13, r30
    7986:	fa cf       	rjmp	.-12     	; 0x797c <main+0x17c>
    7988:	61 d0       	rcall	.+194    	; 0x7a4c <verifySpace>
    798a:	f5 e4       	ldi	r31, 0x45	; 69
    798c:	cf 12       	cpse	r12, r31
    798e:	01 c0       	rjmp	.+2      	; 0x7992 <main+0x192>
    7990:	ff cf       	rjmp	.-2      	; 0x7990 <main+0x190>
    7992:	f4 01       	movw	r30, r8
    7994:	17 bf       	out	0x37, r17	; 55
    7996:	e8 95       	spm
    7998:	07 b6       	in	r0, 0x37	; 55
    799a:	00 fc       	sbrc	r0, 0
    799c:	fd cf       	rjmp	.-6      	; 0x7998 <main+0x198>
    799e:	a4 01       	movw	r20, r8
    79a0:	a0 e0       	ldi	r26, 0x00	; 0
    79a2:	b1 e0       	ldi	r27, 0x01	; 1
    79a4:	2c 91       	ld	r18, X
    79a6:	12 96       	adiw	r26, 0x02	; 2
    79a8:	cd 01       	movw	r24, r26
    79aa:	01 97       	sbiw	r24, 0x01	; 1
    79ac:	fc 01       	movw	r30, r24
    79ae:	80 81       	ld	r24, Z
    79b0:	30 e0       	ldi	r19, 0x00	; 0
    79b2:	38 2b       	or	r19, r24
    79b4:	fa 01       	movw	r30, r20
    79b6:	09 01       	movw	r0, r18
    79b8:	07 bf       	out	0x37, r16	; 55
    79ba:	e8 95       	spm
    79bc:	11 24       	eor	r1, r1
    79be:	4e 5f       	subi	r20, 0xFE	; 254
    79c0:	5f 4f       	sbci	r21, 0xFF	; 255
    79c2:	da 12       	cpse	r13, r26
    79c4:	ef cf       	rjmp	.-34     	; 0x79a4 <main+0x1a4>
    79c6:	f4 01       	movw	r30, r8
    79c8:	f7 be       	out	0x37, r15	; 55
    79ca:	e8 95       	spm
    79cc:	07 b6       	in	r0, 0x37	; 55
    79ce:	00 fc       	sbrc	r0, 0
    79d0:	fd cf       	rjmp	.-6      	; 0x79cc <main+0x1cc>
    79d2:	e7 be       	out	0x37, r14	; 55
    79d4:	e8 95       	spm
    79d6:	1e c0       	rjmp	.+60     	; 0x7a14 <main+0x214>
    79d8:	84 37       	cpi	r24, 0x74	; 116
    79da:	71 f4       	brne	.+28     	; 0x79f8 <main+0x1f8>
    79dc:	25 d0       	rcall	.+74     	; 0x7a28 <getch>
    79de:	24 d0       	rcall	.+72     	; 0x7a28 <getch>
    79e0:	d8 2e       	mov	r13, r24
    79e2:	22 d0       	rcall	.+68     	; 0x7a28 <getch>
    79e4:	33 d0       	rcall	.+102    	; 0x7a4c <verifySpace>
    79e6:	54 01       	movw	r10, r8
    79e8:	f5 01       	movw	r30, r10
    79ea:	85 91       	lpm	r24, Z+
    79ec:	5f 01       	movw	r10, r30
    79ee:	15 d0       	rcall	.+42     	; 0x7a1a <putch>
    79f0:	da 94       	dec	r13
    79f2:	d1 10       	cpse	r13, r1
    79f4:	f9 cf       	rjmp	.-14     	; 0x79e8 <main+0x1e8>
    79f6:	0e c0       	rjmp	.+28     	; 0x7a14 <main+0x214>
    79f8:	85 37       	cpi	r24, 0x75	; 117
    79fa:	39 f4       	brne	.+14     	; 0x7a0a <main+0x20a>
    79fc:	27 d0       	rcall	.+78     	; 0x7a4c <verifySpace>
    79fe:	8e e1       	ldi	r24, 0x1E	; 30
    7a00:	0c d0       	rcall	.+24     	; 0x7a1a <putch>
    7a02:	85 e9       	ldi	r24, 0x95	; 149
    7a04:	0a d0       	rcall	.+20     	; 0x7a1a <putch>
    7a06:	8f e0       	ldi	r24, 0x0F	; 15
    7a08:	92 cf       	rjmp	.-220    	; 0x792e <main+0x12e>
    7a0a:	81 35       	cpi	r24, 0x51	; 81
    7a0c:	11 f4       	brne	.+4      	; 0x7a12 <main+0x212>
    7a0e:	88 e0       	ldi	r24, 0x08	; 8
    7a10:	17 d0       	rcall	.+46     	; 0x7a40 <watchdogConfig>
    7a12:	1c d0       	rcall	.+56     	; 0x7a4c <verifySpace>
    7a14:	80 e1       	ldi	r24, 0x10	; 16
    7a16:	01 d0       	rcall	.+2      	; 0x7a1a <putch>
    7a18:	7a cf       	rjmp	.-268    	; 0x790e <main+0x10e>

00007a1a <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7a1a:	90 91 c0 00 	lds	r25, 0x00C0
    7a1e:	95 ff       	sbrs	r25, 5
    7a20:	fc cf       	rjmp	.-8      	; 0x7a1a <putch>
  UART_UDR = ch;
    7a22:	80 93 c6 00 	sts	0x00C6, r24
    7a26:	08 95       	ret

00007a28 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7a28:	80 91 c0 00 	lds	r24, 0x00C0
    7a2c:	87 ff       	sbrs	r24, 7
    7a2e:	fc cf       	rjmp	.-8      	; 0x7a28 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7a30:	80 91 c0 00 	lds	r24, 0x00C0
    7a34:	84 fd       	sbrc	r24, 4
    7a36:	01 c0       	rjmp	.+2      	; 0x7a3a <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7a38:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7a3a:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7a3e:	08 95       	ret

00007a40 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7a40:	e0 e6       	ldi	r30, 0x60	; 96
    7a42:	f0 e0       	ldi	r31, 0x00	; 0
    7a44:	98 e1       	ldi	r25, 0x18	; 24
    7a46:	90 83       	st	Z, r25
  WDTCSR = x;
    7a48:	80 83       	st	Z, r24
    7a4a:	08 95       	ret

00007a4c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7a4c:	ed df       	rcall	.-38     	; 0x7a28 <getch>
    7a4e:	80 32       	cpi	r24, 0x20	; 32
    7a50:	19 f0       	breq	.+6      	; 0x7a58 <verifySpace+0xc>
    7a52:	88 e0       	ldi	r24, 0x08	; 8
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7a54:	f5 df       	rcall	.-22     	; 0x7a40 <watchdogConfig>
    7a56:	ff cf       	rjmp	.-2      	; 0x7a56 <verifySpace+0xa>
    7a58:	84 e1       	ldi	r24, 0x14	; 20
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
    7a5a:	df cf       	rjmp	.-66     	; 0x7a1a <putch>

00007a5c <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7a5c:	cf 93       	push	r28
    7a5e:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7a60:	e3 df       	rcall	.-58     	; 0x7a28 <getch>
    7a62:	c1 50       	subi	r28, 0x01	; 1
    7a64:	e9 f7       	brne	.-6      	; 0x7a60 <getNch+0x4>
    7a66:	cf 91       	pop	r28
  verifySpace();
}
    7a68:	f1 cf       	rjmp	.-30     	; 0x7a4c <verifySpace>

00007a6a <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7a6a:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7a6c:	80 e0       	ldi	r24, 0x00	; 0
    7a6e:	e8 df       	rcall	.-48     	; 0x7a40 <watchdogConfig>
    7a70:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    7a72:	ff 27       	eor	r31, r31
    7a74:	09 94       	ijmp
