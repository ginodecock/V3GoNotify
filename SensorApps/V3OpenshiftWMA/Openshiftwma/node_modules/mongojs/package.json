{
  "name": "mongojs",
  "description": "Easy to use module that implements the mongo api",
  "keywords": [
    "mongo",
    "db",
    "mongodb"
  ],
  "version": "2.3.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/mongojs.git"
  },
  "author": {
    "name": "Mathias Buus Madsen",
    "email": "mathiasbuus@gmail.com"
  },
  "license": "MIT",
  "contributors": [
    {
      "name": "Mathias Buus Madsen",
      "email": "mathiasbuus@gmail.com"
    },
    {
      "name": "Ian Jorgensen"
    },
    {
      "name": "Eduardo Sorribas"
    },
    {
      "name": "Taeho Kim"
    },
    {
      "name": "Forbes Lindesay"
    },
    {
      "name": "Robert S."
    },
    {
      "name": "Srirangan"
    },
    {
      "name": "Erkan Yilmaz"
    },
    {
      "name": "Jake Maskiewicz"
    },
    {
      "name": "Bjarke Walling"
    },
    {
      "name": "Tobias BaunbÃ¦k"
    },
    {
      "name": "Benedikt Arnold"
    },
    {
      "name": "Kevin McTigue"
    },
    {
      "name": "Thomas Watson Steen",
      "email": "w@tson.dk"
    }
  ],
  "dependencies": {
    "each-series": "^1.0.0",
    "mongodb": "^2.0.45",
    "once": "^1.3.2",
    "parse-mongo-url": "^1.1.0",
    "readable-stream": "^2.0.2",
    "thunky": "^0.1.0",
    "to-mongodb-core": "^2.0.0",
    "xtend": "^4.0.0"
  },
  "scripts": {
    "test": "standard && tape test/test-*.js && node --harmony --harmony-proxies node_modules/tape/bin/tape test/test-*.js",
    "cover": "node --harmony --harmony-proxies node_modules/istanbul/lib/cli.js cover node_modules/tape/bin/tape test/test-*.js --report html",
    "geotag": "geopkg update"
  },
  "devDependencies": {
    "concat-stream": "^1.5.0",
    "geopkg": "^4.0.3",
    "istanbul": "^0.4.1",
    "shelljs": "^0.5.3",
    "standard": "^5.4.1",
    "tape": "^4.0.1"
  },
  "coordinates": [
    48.2288574,
    16.3957216
  ],
  "readme": "# mongojs\n\nA [node.js](http://nodejs.org) module for mongodb, that emulates [the official mongodb API](http://www.mongodb.org/display/DOCS/Home) as much as possible.\nIt wraps [mongodb-native](https://github.com/christkv/node-mongodb-native) and is available through [npm](http://npmjs.org)\n\n\tnpm install mongojs\n\n[![Build Status](https://travis-ci.org/mafintosh/mongojs.svg?branch=master)](https://travis-ci.org/mafintosh/mongojs)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\n## Usage\n\nmongojs is easy to use:\n\n```js\nvar mongojs = require('mongojs')\nvar db = mongojs(connectionString, [collections])\n```\n\nThe connection string should follow the format described in [the mongo connection string docs](http://docs.mongodb.org/manual/reference/connection-string/).\nSome examples of this could be:\n\n```js\n// simple usage for a local db\nvar db = mongojs('mydb', ['mycollection'])\n\n// the db is on a remote server (the port default to mongo)\nvar db = mongojs('example.com/mydb', ['mycollection'])\n\n// we can also provide some credentials\nvar db = mongojs('username:password@example.com/mydb', ['mycollection'])\n\n// connect using SCRAM-SHA-1 mechanism\nvar db = mongojs('username:password@example.com/mydb?authMechanism=SCRAM-SHA-1', ['mycollection'])\n\n// connect using a different auth source\nvar db = mongojs('username:password@example.com/mydb?authSource=authdb', ['mycollection'])\n\n// connect now, and worry about collections later\nvar db = mongojs('mydb')\nvar mycollection = db.collection('mycollection')\n```\n\n[More connection string examples](http://mongodb.github.io/node-mongodb-native/2.0/reference/connecting/)\n\nAfter we connected we can query or update the database just how we would using the mongo API with the exception that we use a callback.\nThe format for callbacks is always `callback(error, value)` where error is null if no exception has occured. The update methods `save`, `remove`, `update` and `findAndModify` also pass the `lastErrorObject` as the last argument to the callback function.\n\n```js\n// find everything\ndb.mycollection.find(function (err, docs) {\n\t// docs is an array of all the documents in mycollection\n})\n\n// find everything, but sort by name\ndb.mycollection.find().sort({name: 1}, function (err, docs) {\n\t// docs is now a sorted array\n})\n\n// iterate over all whose level is greater than 90.\ndb.mycollection.find({level: {$gt: 90}}).forEach(function (err, doc) {\n\tif (!doc) {\n\t\t// we visited all docs in the collection\n\t\treturn\n\t}\n\t// doc is a document in the collection\n})\n\n// find a document using a native ObjectId\ndb.mycollection.findOne({\n\t_id: mongojs.ObjectId('523209c4561c640000000001')\n}, function(err, doc) {\n\t// doc._id.toString() === '523209c4561c640000000001'\n})\n\n// find all named 'mathias' and increment their level\ndb.mycollection.update({name: 'mathias'}, {$inc: {level: 1}}, {multi: true}, function () {\n\t// the update is complete\n})\n\n// find one named 'mathias', tag him as a contributor and return the modified doc\ndb.mycollection.findAndModify({\n\tquery: { name: 'mathias' },\n\tupdate: { $set: { tag: 'maintainer' } },\n\tnew: true\n}, function (err, doc, lastErrorObject) {\n\t// doc.tag === 'maintainer'\n})\n\n\n// use the save function to just save a document (callback is optional for all writes)\ndb.mycollection.save({created: 'just now'})\n```\n\nIf you provide a callback to `find` or any cursor config operation mongojs will call `toArray` for you\n\n```js\ndb.mycollection.find({}, function (err, docs) { ... })\n\ndb.mycollection.find({}).limit(2).skip(1, function (err, docs) { ... })\n```\nis the same as\n\n```js\ndb.mycollection.find({}).toArray(function (err, docs) { ... })\n\ndb.mycollection.find({}).limit(2).skip(1).toArray(function (err, docs) { ... })\n```\n\nFor more detailed information about the different usages of update and querying see [the mongo docs](http://www.mongodb.org/display/DOCS/Manual)\n\n\n## Events\n\n```js\nvar db = mongojs('mydb', ['mycollection'])\n\ndb.on('error', function (err) {\n\tconsole.log('database error', err)\n})\n\ndb.on('connect', function () {\n\tconsole.log('database connected')\n})\n```\n\n\n## Streaming cursors\n\nAs of `0.7.0` all cursors are a [readable stream](http://nodejs.org/api/stream.html#stream_readable_stream) of objects.\n\n```js\nvar JSONStream = require('JSONStream')\n\n// pipe all documents in mycollection to stdout\ndb.mycollection.find({}).pipe(JSONStream.stringify()).pipe(process.stdout)\n```\n\nNotice that you should pipe the cursor through a stringifier (like [JSONStream](https://github.com/dominictarr/JSONStream))\nif you want to pipe it to a serial stream like a http response.\n\n## Tailable cursors\n\nIf you are using a capped collection you can create a [tailable cursor](http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/) to that collection by adding `tailable:true` to the find options\n\n```js\nvar cursor = db.mycollection.find({}, {}, {tailable: true, timeout: false})\n\n// since all cursors are streams we can just listen for data\ncursor.on('data', function (doc) {\n\tconsole.log('new document', doc)\n})\n```\n\nNote that you need to explicitly set the selection parameter in the `find` call.\n\n## Database commands\n\nWith mongojs you can run database commands just like with the mongo shell using `db.runCommand()`\n\n```js\ndb.runCommand({ping: 1}, function (err, res) {\n\tif(!err && res.ok) console.log('we\\'re up')\n})\n```\n\nor `db.collection.runCommand()`\n\n```js\ndb.things.runCommand('count', function (err, res) {\n\tconsole.log(res)\n})\n```\n\n## Bulk updates\n\nAs of 0.15 mongojs supports the Bulk updates introduced in mongodb 2.6. Here's an example of the usage\n\n```js\nvar bulk = db.a.initializeOrderedBulkOp()\nbulk.find({type: 'water'}).update({$set: {level: 1}})\nbulk.find({type: 'water'}).update({$inc: {level: 2}})\nbulk.insert({name: 'Spearow', type: 'flying'})\nbulk.insert({name: 'Pidgeotto', type: 'flying'})\nbulk.insert({name: 'Charmeleon', type: 'fire'})\nbulk.find({type: 'flying'}).removeOne()\nbulk.find({type: 'fire'}).remove()\nbulk.find({type: 'water'}).updateOne({$set: {hp: 100}})\n\nbulk.execute(function (err, res) {\n  console.log('Done!')\n})\n```\n\n## Replication Sets\n\nMongojs can also connect to a mongo replication set by providing a connection string with multiple hosts\n\n```js\nvar db = mongojs('rs-1.com,rs-2.com,rs-3.com/mydb?slaveOk=true', ['mycollection'])\n```\n\nFor more detailed information about replica sets see [the mongo replication docs](http://www.mongodb.org/display/DOCS/Replica+Sets)\n\n## Using harmony features\n\nIf you run node.js with the `--harmony` option, then you can ommit the collection names array, and you can do stuff like.\n\n```js\nvar mongojs = require('mongojs')\nvar db = require('mydb')\n\ndb.hackers.insert({name: 'Ed'})\n```\n\nIn the above example the `hackers` collection is enabled automagically (similar to the shell) using the `Proxy` feature in harmony\n\n## Passing a DB to the constructor\n\nIf you have an instance of mongojs, you can pass this to the constructor and mongojs will use the\nexisting connection of that instance instead of creating a new one.\n\n```js\nvar mongodb = require('mongodb')\nvar mongojs = require('mongojs')\n\nmongodb.Db.connect('mongodb://localhost/test', function (err, theDb) {\n    var db = mongojs(theDb, ['myCollection'])\n})\n```\n\n## Features not supported for MongoDB 2.4 or older (on mongojs version 1.0+).\n\n* Index creation and deletion\n* Aggregation cursors.\n\nThis features are relatively easy to add, but would make the code unnecessarily more complex.\nIf you are using mongodb 2.4 or older and would like to use mongojs 1.0 with the above mentioned\nfeautres, feel free to make a pull request or open and issue..\n\n## Upgrading from 0.x.x to 1.2.x\n\nVersion > 1.0.x is a major rewrite of mongojs. So expect some things not to work the same as in mongojs 0.x.x versions. Breaking changes include:\n\n* __Removed__ `mongojs.connect` use `mongojs()` directly instead\n\n# API\n\nThis API documentation is a work in progress.\n\n#### Collection\n\n#####`db.collection.aggregate([pipeline], [options], [callback])`\nhttps://docs.mongodb.org/manual/reference/method/db.collection.aggregate/\n\n#####`db.collection.aggregate([pipelineStep], [pipelineStep], [pipelineStep], ..., [callback])`\n\n#####`db.collection.count([query], callback)`\n\n#####`db.collection.createIndex(keys, options, [callback])`\n\n#####`db.collection.distinct(field, query, callback)`\n\n#####`db.collection.drop([callback])`\n\n#####`db.collection.dropIndex(index, [callback])`\n\n#####`db.collection.dropIndexes([callback])`\n\n#####`db.collection.ensureIndex(keys, options, [callback])`\n\n#####`db.collection.find([criteria], [projection], [callback])`\n\nThis function applies a query to a collection. You can get the return value, which is a cursor, or pass a callback\nas the last parameter. Said callback receives `(err, documents)`\n\n#####`db.collection.findOne([criteria], [projection], callback)`\n\nApply a query and get one single document passed as a callback. The callback receives `(err, document)`\n\n#####`db.collection.findAndModify(document, callback)`\n\n#####`db.collection.getIndexes(callback)`\n\n#####`db.collection.group(document, callback)`\n\n#####`db.collection.insert(docOrDocs, [callback])`\n\n#####`db.collection.isCapped(callback)`\n\n#####`db.collection.mapReduce(map, reduce, options, [callback])`\n\n#####`db.collection.reIndex([callback])`\n\n#####`db.collection.remove(query, [justOne], [callback])`\n#####`db.collection.remove(query, [options], [callback])`\n\n#####`db.collection.runCommand(command, [callback])`\n\n#####`db.collection.save(doc, [options], [callback])`\n\n#####`db.collection.stats(callback)`\n\n#####`db.collection.update(query, update, [options], [callback])`\n\n#####`db.collection.toString()`\n\nGet the name of the collection.\n\n#### Cursor\n\n#####`cursor.batchSize(size, [callback])`\n\n#####`cursor.count(callback)`\n\n#####`cursor.explain(callback)`\n\n#####`cursor.forEach(function)`\n\n#####`cursor.limit(n, [callback])`\n\n#####`cursor.map(function, [callback])`\n\n#####`cursor.next(callback)`\n\n#####`cursor.skip(n, [callback])`\n\n#####`cursor.sort(sortOptions, [callback])`\n\n#####`cursor.toArray(callback)`\n\n#####`cursor.rewind()`\n\n#####`cursor.destroy()`\n\n#### Database\n\n#####`db.addUser(document)`\n\n#####`db.createCollection(name, options, [callback])`\n\n#####`db.dropDatabase([callback])`\n\n#####`db.eval(code, [params], [options], [callback])`\n\n#####`db.getCollectionNames(callback)`\n\n#####`db.getLastError(callback)`\n\n#####`db.getLastErrorObj(callback)`\n\n#####`db.removeUser(username, [callback])`\n\n#####`db.runCommand(command, [callback])`\n\n#####`db.stats([callback])`\n\n#####`db.close()`\n\n#### Bulk\n\n#####`bulk.execute()`\n\n#####`bulk.find(query)`\n\n#####`bulk.find.remove()`\n\n#####`bulk.find.removeOne()`\n\n#####`bulk.find.replaceOne(document)`\n\n#####`bulk.find.update(updaterParam)`\n\n#####`bulk.find.updateOne(updaterParam)`\n\n#####`bulk.find.upsert(upsertParam)`\n\n#####`bulk.insert(document)`\n\n#####`bulk.toString()`\n\n#####`bulk.tojson()`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/mongojs/issues"
  },
  "_id": "mongojs@2.3.0",
  "_from": "mongojs@"
}
