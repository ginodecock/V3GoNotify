{
  "name": "pushbullet",
  "version": "1.4.3",
  "description": "Use PushBullets REST API",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/alexwhitman/node-pushbullet-api"
  },
  "keywords": [
    "pushbullet",
    "api",
    "rest"
  ],
  "author": {
    "name": "Alex Whitman",
    "email": "alex@alexwhitman.com"
  },
  "license": "BSD",
  "dependencies": {
    "mime": "~1.2.11",
    "request": "~2.44.0",
    "websocket": "~1.0.8"
  },
  "readme": "# PushBullet API\n\nA Node.js module for using the [PushBullet REST API](https://www.pushbullet.com/api).\n\n## Usage\n\nThis module is very simple to use.  All you need is your PushBullet API key and you can begin pushing.\n\n```javascript\nvar PushBullet = require('pushbullet');\nvar pusher = new PushBullet('YOUR-API-KEY');\n\npusher.devices(function(error, response) {\n\t// response is the JSON response from the API\n});\n\npusher.note(deviceParams, noteTitle, noteBody, function(error, response) {\n\t// response is the JSON response from the API\n});\n```\n\n### Target devices\n\nThe push functions (`note`, `address`, `list`, `link`, `file`) have a `deviceParams` parameter which can be several types:\n\n- If it is a string containing an '@' it is treated as an email address.\n- If it is a string not containing an '@' it is treated as a device iden.\n- If it is a number it is treated as a device id.\n- If it is an object it is assumed to have one of the 'target parameters' as defined on https://docs.pushbullet.com/v2/pushes/ as an attribute.  It can also have an optional `source_device_iden` attribute.\n\n## Callbacks\n\nEach callback receives two arguments.  For a successful request the first argument will be `null` or `undefined`\nand the second argument will be the parsed JSON response from the API.\n\nIf an error occurs at any part of the request the first argument will be an Error object.\n\n## API\n\n### PushBullet.me(callback);\n\nGet the current user's information.\n\n```javascript\npusher.me(function(err, response) {});\n```\n\n### PushBullet.devices([options], callback)\n\nRetrieves a list of pushable devices.\n\nThe `options` parameter can use two attributes `cursor` and`limit`\nto control the data returned.\n\n- `cursor` is used to select the page if the results have been paginated.\n- `limit` is used to limit the number of objects in the reponse.\n\n```javascript\nvar options = {\n\tlimit: 10\n};\n\npusher.devices(options, function(error, response) {});\n```\n\n### PushBullet.createDevice(nickname, callback)\n\nCreates a new device.\n\n```javascript\npusher.createDevice('Device name', function(error, response) {});\n```\n\n### PushBullet.deleteDevice(deviceIden, callback)\n\nDelete a device.\n\n```javascript\npusher.deleteDevice('u1qSJddxeKwOGuGW', function(error, response) {});\n```\n\n### PushBullet.contacts([options], callback)\n\nRetrieves a list of pushable contacts.\n\nThe `options` parameter can use two attributes `cursor` and`limit`\nto control the data returned.\n\n- `cursor` is used to select the page if the results have been paginated.\n- `limit` is used to limit the number of objects in the reponse.\n\n```javascript\nvar options = {\n\tlimit: 10\n};\n\npusher.contacts(options, function(error, response) {});\n```\n\n### PushBullet.createContact(name, email, callback)\n\nCreate a contact.\n\n```javascript\npusher.createContact('Bob', 'bob@test.com', function(error, response) {});\n```\n\n### PushBullet.deleteContact(contactIden, callback)\n\nDelete a contact.\n\n```javascript\npusher.deleteContact('ubdcjAfszs0Smi', function(error, response) {});\n```\n\n### PushBullet.note(deviceParams, noteTitle, noteBody, callback)\n\nPush a note to the specified device.\n\n```javascript\npusher.note('u1qSJddxeKwOGuGW', 'New Note', 'Note body text', function(error, response) {});\n```\n\n### PushBullet.address(deviceParams, name, address, callback)\n\nPush an address to the specified device.\n\n```javascript\npusher.address('u1qSJddxeKwOGuGW', 'Fake Address', '10 Fake Street, Fakesville', function(error, response) {});\n```\n\n### PushBullet.list(deviceParams, name, listItems, callback)\n\nPush a list to the specified device.\n\n```javascript\nvar shoppingList = [\n\t'steaks',\n\t'sausages',\n\t'burgers',\n\t'buns',\n\t'beer'\n];\npusher.list('u1qSJddxeKwOGuGW', 'BBQ', shoppingList, function(error, response) {});\n```\n\n### PushBullet.link(deviceParams, name, url, callback)\n\nPush a link to the specified device.\n\n```javascript\npusher.link('u1qSJddxeKwOGuGW', 'GitHub', 'https://github.com/', function(error, response) {});\n```\n\n### PushBullet.file(deviceParams, filePath, message, callback)\n\nPush a file to the specified device.\n\n```javascript\npusher.file('u1qSJddxeKwOGuGW', '/path/to/file', 'Important file!', function(error, response) {});\n```\n\n### PushBullet.updatePush(pushIden, updates, callback)\n\nUpdate a push.\n\nUse to dismiss pushes or to update lists.\n\n```javascript\nvar updates = {\n\tdismissed: true,\n\titems: [\n\t\t{\n\t\t\ttext: 'steaks',\n\t\t\tchecked: true\n\t\t}\n\t\t{\n\t\t\ttext: 'sausages',\n\t\t\tchecked: true\n\t\t}\n\t\t{\n\t\t\ttext: 'burgers',\n\t\t\tchecked: true\n\t\t}\n\t\t{\n\t\t\ttext: 'buns',\n\t\t\tchecked: true\n\t\t}\n\t\t{\n\t\t\ttext: 'beer',\n\t\t\tchecked: true\n\t\t}\n\t]\n}\n\npusher.updatePush('udhrSpjAewzdwpCC', updates, function(error, response) {});\n```\n\n### PushBullet.deletePush(pushIden, callback)\n\nDelete a push.\n\n```javascript\npusher.deletePush('udhrSpjAewzdwpCC', function(error, response) {});\n```\n\n### PushBullet.history([options], callback)\n\nGet the push history.\n\nThe `options` parameter can use three attributes `cursor`, `limit` and\n`modified_after` to control the data returned.\n\n- `cursor` is used to select the page if the results have been paginated.\n- `limit` is used to limit the number of objects in the reponse.\n- `modified_after` should be a timestamp.\n\n```javascript\nvar options = {\n\tlimit: 10,\n\tmodified_after: 1400000000.00000\n};\n\npusher.history(options, function(error, response) {})\n```\n\n### PushBullet.subscriptions(callback)\n\nGet a list of current subscriptions.\n\n```javascript\npusher.subscriptions(function(error, response) {});\n```\n\n### PushBullet.subscribe(channelTag, callback)\n\nSubscribe to a channel.\n\n```javascript\npusher.subscribe('jblow', function(error, response) {});\n```\n\n### PushBullet.unsubscribe(subscriptionIden, callback)\n\nSubscribe to a channel.\n\n```javascript\npusher.unsubscribe('udprOsjAsLtNTRAG', function(error, response) {});\n```\n\n### PushBullet.channelInfo(channelTag, callback)\n\nGet information about a channel.\n\n```javascript\npusher.channelInfo('jblow', function(error, response) {});\n```\n\n### PushBullet.stream()\n\nReturns a new stream listener which will emit events from the stream.\n\n```javascript\nvar stream = pusher.stream();\n```\n\n#### connect()\n\nConnects to the stream.\n\n```javascript\nstream.connect();\n```\n\n#### close()\n\nDisconnects from the stream.\n\n```javascript\nstream.close();\n```\n\n#### Events\n\n##### connect\n\nEmitted when the stream has connected.\n\n```javascript\nstream.on('connect', function() {\n\t// stream has connected\n});\n```\n\n##### close\n\nEmitted when the stream has disconnected.\n\n```javascript\nstream.on('close', function() {\n\t// stream has disconnected\n});\n```\n\n##### error\n\nEmitted when there is a connection or streaming error.\n\n```javascript\nstream.on('error', function(error) {\n\t// stream error\n});\n```\n\n##### message\n\nEmitted when a message is received from the stream.  `message` will be emitted for all messages\nbut you can listen for specific messages with `nop`, `tickle` and `push`.\n\n```javascript\nstream.on('message', function(message) {\n\t// message received\n});\n```\n\n##### nop\n\nEmitted when the keep-alive 'no-operation' message is received.\n\n```javascript\nstream.on('nop', function() {\n\t// nop message received\n});\n```\n\n##### tickle\n\nEmitted when the `tickle` message is received.\n\n```javascript\nstream.on('tickle', function(type) {\n\t// tickle message received\n});\n```\n\n##### push\n\nEmited when the `push` message is received.\n\n```javascript\nstream.on('push', function(push) {\n\t// push message received\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexwhitman/node-pushbullet-api/issues"
  },
  "_id": "pushbullet@1.4.3",
  "_from": "pushbullet@"
}
